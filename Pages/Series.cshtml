@page "/series/{id?}"
@model SeriesModel
@{
    ViewData["Title"] = "Series";
}

<main>
    <form method="post">
        <input type="hidden" name="id" value="@Model.Series.ID" />
    </form>
    <div class="px-4 sm:px-6 lg:px-8">
        <div class="sm:flex sm:items-center">
            <div class="sm:flex-auto">
                <h1 class="text-base font-semibold leading-6 text-gray-900">@Model.Series.Name</h1>
                <p class="mt-2 text-sm text-gray-700">A list of all the chapters found in the table of contents.</p>
            </div>
            <div class="mt-5 flex lg:ml-4 lg:mt-0 flex-col sm:flex-row">
                <span class="mb-3 sm:mb-0 sm:ml-3">
                    <a href="/series/@Model.Series.ID/settings" type="button"
                        class="inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50">
                        <svg class="-ml-0.5 mr-1.5 h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor"
                            aria-hidden="true">
                            <path
                                d="M2.695 14.763l-1.262 3.154a.5.5 0 00.65.65l3.155-1.262a4 4 0 001.343-.885L17.5 5.5a2.121 2.121 0 00-3-3L3.58 13.42a4 4 0 00-.885 1.343z" />
                        </svg>
                        Settings
                    </a>
                </span>

                <span class="mb-3 sm:mb-0 sm:ml-3">
                    <button onclick="scanToc()" type="button"
                        class="inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50">
                        <svg class="-ml-0.5 mr-1.5 h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor"
                            aria-hidden="true">
                            <path fill-rule="evenodd"
                                d="M2.25 4.5A.75.75 0 0 1 3 3.75h14.25a.75.75 0 0 1 0 1.5H3a.75.75 0 0 1-.75-.75Zm14.47 3.97a.75.75 0 0 1 1.06 0l3.75 3.75a.75.75 0 1 1-1.06 1.06L18 10.81V21a.75.75 0 0 1-1.5 0V10.81l-2.47 2.47a.75.75 0 1 1-1.06-1.06l3.75-3.75ZM2.25 9A.75.75 0 0 1 3 8.25h9.75a.75.75 0 0 1 0 1.5H3A.75.75 0 0 1 2.25 9Zm0 4.5a.75.75 0 0 1 .75-.75h5.25a.75.75 0 0 1 0 1.5H3a.75.75 0 0 1-.75-.75Z"
                                clip-rule="evenodd" />
                        </svg>
                        Scan TOC
                    </button>
                </span>

                <span class="sm:ml-3">
                    <button onclick="sendSeries()" type="button"
                        class="inline-flex items-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"
                            class="-ml-0.5 mr-1.5 h-5 w-5">
                            <path
                                d="M3.478 2.404a.75.75 0 0 0-.926.941l2.432 7.905H13.5a.75.75 0 0 1 0 1.5H4.984l-2.432 7.905a.75.75 0 0 0 .926.94 60.519 60.519 0 0 0 18.445-8.986.75.75 0 0 0 0-1.218A60.517 60.517 0 0 0 3.478 2.404Z" />
                        </svg>
                        Send all to Kindle
                    </button>
                </span>
            </div>
        </div>

        <div class="-mx-4 mt-8 sm:-mx-0">
            <table class="min-w-full divide-y divide-gray-300">
                <thead>
                    <tr>
                        <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-0">
                            Title</th>
                        <th scope="col"
                            class="hidden px-3 py-3.5 text-left text-sm font-semibold text-gray-900 lg:table-cell">
                            Published</th>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Crawled</th>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Emailed</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-200 bg-white">
                    @foreach (var chapter in Model.Series.Chapters.OrderByDescending(c =>
                    c.Published).ThenByDescending(c
                    => c.Title))
                    {
                        <tr>
                            <td
                                class="w-full max-w-0 py-4 pl-4 pr-3 text-sm font-medium text-indigo-600 hover:text-indigo-900 sm:w-auto sm:max-w-none sm:pl-0">
                                <a href="@chapter.URL">@chapter.Title</a>
                                <dl class="font-normal lg:hidden">
                                    <dt class="sr-only">Published</dt>
                                    <dd class="mt-1 truncate text-gray-700">@chapter.Published.ToLocalTime()</dd>
                                </dl>
                            </td>
                            <td class="hidden px-3 py-4 text-sm text-gray-500 lg:table-cell">
                                @chapter.Published.ToLocalTime()</td>
                            <td class="px-3 py-4 text-sm text-gray-500">
                                <div class="flex items-center">
                                    <span>@(chapter.Crawled ? "Yes" : "No") </span>
                                    <button onclick="crawlChapter(@chapter.ID)" type="button"
                                        class="ml-1 text-indigo-600 hover:text-indigo-900">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                            stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                            <path stroke-linecap="round" stroke-linejoin="round"
                                                d="M9 8.25H7.5a2.25 2.25 0 0 0-2.25 2.25v9a2.25 2.25 0 0 0 2.25 2.25h9a2.25 2.25 0 0 0 2.25-2.25v-9a2.25 2.25 0 0 0-2.25-2.25H15M9 12l3 3m0 0 3-3m-3 3V2.25" />
                                        </svg>
                                    </button>
                                </div>
                            </td>
                            <td class="px-3 py-4 text-sm text-gray-500">
                                <div class="flex items-center">
                                    <span>@(chapter.Sent ? "Yes" : "No")</span>
                                    <button onclick="sendChapter(@chapter.ID)" type="button"
                                        class="ml-1 text-indigo-600 hover:text-indigo-900">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                            stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                            <path stroke-linecap="round" stroke-linejoin="round"
                                                d="M15.75 9V5.25A2.25 2.25 0 0 0 13.5 3h-6a2.25 2.25 0 0 0-2.25 2.25v13.5A2.25 2.25 0 0 0 7.5 21h6a2.25 2.25 0 0 0 2.25-2.25V15m3 0 3-3m0 0-3-3m3 3H9" />
                                        </svg>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    </div>
</main>

@section Scripts {
    <script>
        const scanToc = () => {
            const formData = new FormData();
            formData.append("id", @Model.Series.ID);

            fetch("/series/@Model.Series.ID?handler=scan", {
                method: "POST",
                body: formData,
                headers: {
                    "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value,
                    "Content-type": "application/json; charset=UTF-8"
                }
            })
                .then(response => response.json())
                .then(data => {
                    storage.addId(data.jobId);
                });
        }

        const sendSeries = () => {
            const formData = new FormData();
            formData.append("id", @Model.Series.ID);

            fetch("/series/@Model.Series.ID?handler=series", {
                method: "POST",
                body: formData,
                headers: {
                    "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value,
                    "Content-type": "application/json; charset=UTF-8"
                }
            })
                .then(response => response.json())
                .then(data => {
                    storage.addId(data.jobId);
                });
        }

        const crawlChapter = (id) => {
            const formData = new FormData();
            formData.append("id", id);

            fetch(`/series/${id}?handler=crawl`, {
                method: "POST",
                body: formData,
                headers: {
                    "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value,
                    "Content-type": "application/json;"
                }
            })
                .then(response => response.json())
                .then(data => {
                    storage.addId(data.jobId);
                });
        }   

        const sendChapter = (id) => {
            const formData = new FormData();
            formData.append("id", id);

            fetch(`/series/${id}?handler=chapter`, {
                method: "POST",
                body: formData,
                headers: {
                    "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value,
                    "Content-type": "application/json;"
                }
            })
                .then(response => response.json())
                .then(data => {
                    storage.addId(data.jobId);
                });
        }        
    </script>
}
@page "/series/{id?}/chapter/{chapterId}"
@model ChapterModel
@{
    ViewData["Title"] = "Chapter";
}

<main>
    <form method="post">
        <input type="hidden" name="id" value="@Model.Chapter.ID" />
    </form>
    @if (Model.Chapter.Crawled)
    {
        <div class="prose">
            @Html.Raw(Model.Chapter.Content)
        </div>
    }
    else
    {
        <div class="text-center">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"
                aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25H12" />

            </svg>
            <h3 class="mt-2 text-sm font-semibold text-gray-900">No content</h3>
            <p class="mt-1 text-sm text-gray-500">Chapter has not yet been crawled.</p>
            <div class="mt-6">
                <button onclick="crawlChapter()" type="button"
                    class="inline-flex items-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                    <svg class="-ml-0.5 mr-1.5 h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path
                            d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
                    </svg>
                    Crawl Chapter
                </button>
            </div>
        </div>
    }
</main>


@section Scripts {
    <script>
        const crawlChapter = () => {
            const formData = new FormData();

            fetch(`/series/@Model.Chapter.SeriesID/chapter/@Model.Chapter.ID?handler=crawl`, {
                method: "POST",
                body: formData,
                headers: {
                    "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value,
                    "Content-type": "application/json;"
                }
            })
                .then(response => response.json())
                .then(data => {
                    storage.addId(data.jobId);
                });
        }       
    </script>
}